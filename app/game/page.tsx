"use client";

import { useEffect, useState } from "react";
import { FaRegImage } from "react-icons/fa6";

import { create, generate } from "@/app/game/backend";
import { AnimatePresence, motion } from "framer-motion";

const delays = [
    "animation-delay-0",
    "animation-delay-300",
    "animation-delay-600",
    "animation-delay-900",
    "animation-delay-1200",
    "animation-delay-1500",
];

type GoogleImage = {
    url: string;
    height: number;
    width: number;
};

export default function Game() {
    const [how, setHow] = useState(true);
    const [board, setBoard] = useState<GoogleImage[]>([]);
    const [isCreating, setIsCreating] = useState(false);
    const [prompt, setPrompt] = useState("");
    const [selectedImage, setSelectedImage] = useState<number | null>(null);

    const handleSubmit: React.FormEventHandler<HTMLFormElement> = (e) => {
        e.preventDefault();
        createBoard(prompt);
    };

    const getValidURLS = async (GoogleImages: GoogleImage[]) => {
        const checkUrl = async (image: GoogleImage) => {
            try {
                const response = await fetch(image.url);
                if (response.status === 200) {
                    return image;
                }
            } catch (error) {
                // console.error(`Error fetching ${image.url}:`, error);
            }
            return null;
        };

        const validUrls = [];
        let index = 0;

        while (validUrls.length < 5 && index < GoogleImages.length) {
            const batch = GoogleImages.slice(index, index + 5);
            const results = await Promise.all(batch.map(checkUrl));
            validUrls.push(...results.filter((result) => result !== null));
            index += 5;
        }
        return validUrls.slice(0, 5);
    };

    const createBoard = (prompt: string) => {
        console.log("Attempting to create board");
        setIsCreating(true);
        generate(prompt).then((data) => {
            console.log(data);
            if (data) {
                setBoard([{ url: data, height: 1024, width: 1024 }]);
                setIsCreating(false);
            } else {
                console.log("No data received from generate");
                createBoard(prompt);
            }
        });
        create(prompt).then((data) => {
            console.log(data);
            if (data && data.length > 0) {
                const images = [...data].sort(() => Math.random() - 0.5);
                getValidURLS(images).then((validImages) => {
                    setBoard(validImages);
                });
                setIsCreating(false);
            } else {
                console.log("No data received from create");
                createBoard(prompt);
            }
        });
    };

    return (
        <main className="flex min-h-screen flex-col items-center p-24">
            <AnimatePresence>
                {how && (
                    <motion.div
                        className="rounded-lg bg-slate-100 w-[620px] shadow-2xl p-8 absolute"
                        initial={{ opacity: 0, scale: 0.5 }}
                        animate={{ opacity: 1, scale: 1 }}
                        exit={{ opacity: 0, scale: 0.5 }}
                    >
                        <h2 className="text-3xl font-bold">How to Play</h2>
                        <p className="mt-4 text-lg">
                            6 images will appear on the screen given a certain
                            prompt, and you have to choose the image that is
                            generated by AI.
                        </p>
                        <div className="grid grid-flow-row grid-cols-3 grid-rows-2 gap-x-20 gap-y-10 p-8 pb-2 items-center justify-items-center">
                            {Array.from({ length: 6 }).map((_, i) => (
                                <div
                                    className={`h-24 w-40 bg-slate-200 rounded-lg flex justify-center items-center animate-bspin animation-delay-${
                                        i * 300
                                    }`}
                                    key={i}
                                >
                                    <FaRegImage className="text-5xl text-slate-300" />
                                </div>
                            ))}
                        </div>
                        <div className="w-full flex">
                            <button
                                className="bg-green-400 text-white py-2 mx-2 mt-4 font-black px-8 rounded-lg ml-auto hover:bg-green-600 duration-500 ease-in-out"
                                onClick={() => setHow(false)}
                            >
                                Start Game
                            </button>
                        </div>
                    </motion.div>
                )}
            </AnimatePresence>
            <div className="flex flex-col items-center justify-center">
                <h1 className="text-4xl font-bold m-4">Guess the AI image</h1>
                <form onSubmit={handleSubmit}>
                    <input
                        type="text"
                        placeholder="Enter a prompt"
                        className="w-96 h-10 m-4 p-2 rounded-lg border-2 border-slate-200"
                        id="prompt"
                        value={prompt}
                        onChange={(e) => setPrompt(e.target.value)}
                    />
                    <button
                        type="submit"
                        className="bg-green-400 text-white py-2 font-black px-8 rounded-lg hover:bg-green-600 duration-500 ease-in-out disabled:cursor-not-allowed cursor-pointer"
                        disabled={isCreating || prompt.trim() === ""}
                    >
                        {isCreating ? "Loading..." : "Create Board"}
                    </button>
                </form>
            </div>
            <div className="grid grid-flow-row grid-cols-2 gap-x-20 gap-y-10 p-8 pb-2 items-center justify-items-center">
                {board.map((img, i) => (
                    <div
                        className={`h-36 w-52 rounded-lg block justify-center items-center `}
                        key={i}
                    >
                        <img
                            key={i}
                            src={img.url}
                            height={img.height}
                            width={img.width}
                            alt={"image"}
                            className={`h-36 w-52 object-cover rounded-md border-4 cursor-pointer ${
                                selectedImage == i
                                    ? "border-blue-600"
                                    : "hover:border-blue-600"
                            } duration-300 ease-in-out`}
                            onClick={() => setSelectedImage(i)}
                        />
                    </div>
                ))}
            </div>
            <div className="w-full flex justify-center">
                <button
                    className="bg-blue-400 text-white py-2 mx-2 mt-4 font-black px-8 rounded-lg hover:bg-blue-600 duration-500 ease-in-out disabled:bg-gray-400 disabled:cursor-not-allowed cursor-pointer"
                    disabled={selectedImage === null}
                    onClick={() => {
                        console.log("Selected image", selectedImage);
                    }}
                >
                    Submit
                </button>
            </div>
        </main>
    );
}
